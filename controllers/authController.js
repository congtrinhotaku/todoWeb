const User = require("../models/User");
const bcrypt = require("bcrypt");
const sendMail = require("../middlewares/mailer");

// ================== FORM ƒêƒÇNG K√ù ==================
exports.getRegister = (req, res) => {
  res.render("auth/dangky", { error: null });
};

exports.postRegister = async (req, res) => {
  const { username, email, password } = req.body;

  try {
    const existingUser = await User.findOne({ email });

    if (existingUser) {
      if (!existingUser.isVerified) {
        // N·∫øu user ch∆∞a x√°c th·ª±c => x√≥a ƒë·ªÉ ƒëƒÉng k√Ω l·∫°i
        await User.deleteOne({ email });
        console.log("üóëÔ∏è ƒê√£ xo√° user ch∆∞a x√°c th·ª±c:", email);
      } else {
        // N·∫øu user ƒë√£ x√°c th·ª±c => b√°o l·ªói
        return res.render("auth/dangky", {
          error: "‚ùå Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng. Vui l√≤ng d√πng email kh√°c.",
        });
      }
    }

    // T·∫°o user m·ªõi
    const user = new User({ username, email, password });
    req.session.pendingEmail = email;

    // Sinh OTP
    const otp = Math.floor(100000 + Math.random() * 900000).toString();
    user.otp = await bcrypt.hash(otp, 10);
    user.otpExpires = Date.now() + 5 * 60 * 1000; // 5 ph√∫t

    await user.save();

    // G·ª≠i mail OTP
    await sendMail(email, "M√£ OTP x√°c th·ª±c t√†i kho·∫£n", "otpEmail.ejs", {
      username,
      otp,
    });

    res.redirect("/verify");
  } catch (err) {
    console.error("‚ùå L·ªói ƒëƒÉng k√Ω:", err);
    res.render("auth/dangky", {
      error: "‚ùå L·ªói ƒëƒÉng k√Ω: " + err.message,
    });
  }
};

// ================== FORM NH·∫¨P OTP ==================
exports.getVerify = (req, res) => {
  const email = req.session.pendingEmail;
  if (!email) return res.redirect("/register");
  res.render("auth/otp", { email, error: null });
};

exports.postVerify = async (req, res) => {
  const { email, otp } = req.body;
  try {
    const user = await User.findOne({ email });
    if (!user) {
      return res.render("auth/otp", {
        email,
        error: "‚ùå Email kh√¥ng t·ªìn t·∫°i.",
      });
    }

    if (user.isVerified) return res.redirect("/login");

    if (!user.otp || user.otpExpires < Date.now()) {
      return res.render("auth/otp", {
        email,
        error: "‚ùå OTP ƒë√£ h·∫øt h·∫°n, vui l√≤ng ƒëƒÉng k√Ω l·∫°i.",
      });
    }

    // So s√°nh OTP
    const isMatch = await bcrypt.compare(otp, user.otp);
    if (!isMatch) {
      return res.render("auth/otp", {
        email,
        error: "‚ùå OTP kh√¥ng ƒë√∫ng.",
      });
    }

    // X√°c th·ª±c th√†nh c√¥ng
    user.isVerified = true;
    user.otp = undefined;
    user.otpExpires = undefined;
    await user.save();

    res.redirect("/login");
  } catch (err) {
    res.render("auth/otp", {
      email,
      error: "‚ùå L·ªói x√°c th·ª±c: " + err.message,
    });
  }
};

// ================== FORM ƒêƒÇNG NH·∫¨P ==================
exports.getLogin = (req, res) => {
  res.render("auth/dangnhap", { error: null });
};

exports.postLogin = async (req, res) => {
  const { email, password } = req.body;
  try {
    const user = await User.findOne({ email });

    if (!user) {
      return res.render("auth/dangnhap", {
        error: "‚ùå Email kh√¥ng t·ªìn t·∫°i.",
      });
    }

    if (!user.isVerified) {
      return res.render("auth/dangnhap", {
        error: "‚ö†Ô∏è Vui l√≤ng x√°c th·ª±c email tr∆∞·ªõc khi ƒëƒÉng nh·∫≠p.",
      });
    }

    const isMatch = await user.comparePassword(password);
    if (!isMatch) {
      return res.render("auth/dangnhap", {
        error: "‚ùå Sai m·∫≠t kh·∫©u.",
      });
    }

    // L∆∞u session
    req.session.userId = user._id;
    req.session.user = user;

    res.redirect("/tasks");
  } catch (err) {
    res.render("auth/dangnhap", {
      error: "‚ùå L·ªói ƒëƒÉng nh·∫≠p: " + err.message,
    });
  }
};

// ================== ƒêƒÇNG XU·∫§T ==================
exports.logout = (req, res) => {
  req.session.destroy();
  res.redirect("/login");
};
